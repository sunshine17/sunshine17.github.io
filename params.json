{"name":"PHP7 Experience","tagline":"","body":"# 先说结论\r\n这是一个皆大欢喜的版本升级，节省服务器硬件成本，开发者欢欣拥抱: \r\n- 性能提升效果明显，在我的老PC机上比5.6提升至少30%\r\n- 语法引入了时下主流的其它语言都有的特性，使开发效率得到明显的提升\r\n- 不兼容旧版本的地方不多，基本不会触碰到\r\n\r\n\r\n# 新特性\r\n\r\n## 更简洁，更彻底的Closure -- Closure::call() \r\n在javascript里，很简单的this绑定:\r\n```\r\nfunction full_name(last_name){ \r\n    return this.first_name + '.' + last_name; \r\n}\r\n// below returns \"Jack.London\"\r\nfull_name.apply({first_name: 'Jack'}, ['London'])   \r\n\r\n```\r\n\r\nPHP7通过Closure::call()实现：\r\n```\r\n<?php\r\nclass A {private $x = 1;}\r\n\r\n// PHP7 前\r\n$getXCB = function() {return $this->x;};\r\n$getX = $getXCB->bindTo(new A, 'A'); // intermediate closure\r\necho $getX();\r\n\r\n// PHP7 后\r\n$getX = function() {return $this->x;};\r\necho $getX->call(new A);\r\n\r\n// 会输出\r\n// 1\r\n// 1\r\n```\r\n\r\n## Generator的优化\r\n- 加入return语句\r\nGenerator是PHP5.5开始加入的特性，当时在Generator里不能有return语句，若要取得最后一个元素只能由调用者检查是否已取得最后一个元素。PHP7后，可以直接调用Generator::getReturn()来获取最后一个元素。例如:\r\n```\r\n<?php\r\n\r\n$gen = (function() {\r\n    yield 1;\r\n    yield 2;\r\n\r\n    return 3;\r\n})();\r\n\r\nforeach ($gen as $val) {\r\n    echo $val, PHP_EOL;\r\n}\r\n\r\necho $gen->getReturn(), PHP_EOL;\r\n\r\n// Output: \r\n// 1\r\n// 2\r\n// 3\r\n```\r\n- 方便的委派(delegation)\r\n可以在Generator里委派另一个Generator来生成数据，简单直接的写法：\r\n```\r\n<?php\r\nfunction gen() {\r\n    yield 1;\r\n    yield 2;\r\n    yield from gen2();\r\n}\r\n\r\nfunction gen2() {\r\n    yield 3;\r\n    yield 4;\r\n}\r\n\r\nforeach (gen() as $val) {\r\n    echo $val, PHP_EOL;\r\n}\r\n\r\n// ===== OUTPUT =====\r\n// 1\r\n// 2\r\n// 3\r\n// 4\r\n?>\r\n```\r\n\r\n## Session选项配置更灵活\r\n以往session的选项是在php.ini中配置的，现在可以把这些选项以数组的方式传参给session_start()函数，例如：\r\n```\r\n<?php\r\nsession_start([\r\n    'cache_limiter' => 'private',\r\n    'read_and_close' => true,\r\n]);\r\n?>\r\n```\r\n\r\n## use声明可分组\r\n在同一命名空间下import的类、函数、常量现在可以写在同一个use中，作为一个分组，直接看例子：\r\n```\r\n<?php\r\n// PHP 7 之前\r\nuse some\\namespace\\ClassA;\r\nuse some\\namespace\\ClassB;\r\nuse some\\namespace\\ClassC as C;\r\n\r\nuse function some\\namespace\\fn_a;\r\nuse function some\\namespace\\fn_b;\r\nuse function some\\namespace\\fn_c;\r\n\r\nuse const some\\namespace\\ConstA;\r\nuse const some\\namespace\\ConstB;\r\nuse const some\\namespace\\ConstC;\r\n\r\n// PHP 7+ 后\r\nuse some\\namespace\\{ClassA, ClassB, ClassC as C};\r\nuse function some\\namespace\\{fn_a, fn_b, fn_c};\r\nuse const some\\namespace\\{ConstA, ConstB, ConstC};\r\n?>\r\n```\r\n\r\n\r\n\r\n## 引入静态类型语言的精粹\r\n- 函数参数类型声明(Scalar Type Hints)\r\n在函数参数前面声明参数类型，默认不强制检查参数类型，若传参类型与声明不匹配，解释器会自动转换类型而不报任何错误与警告。但你也可以启用严格模式(strict mode)，让解释器执行传参类型检查，若类型不匹配则抛出Fatal error: Uncaught TypeError。例如：\r\n```\r\n<?php\r\ndeclare(strict_types = 1);  // 在php文件的第一行声明使用严格模式\r\nfunction double(int $value){\r\n   return 2 * $value;\r\n}\r\n$a = double(\"5\");\r\nvar_dump($a);\r\n```\r\n\r\n- 函数返回值类型声明(Return Type Hints)\r\n在函数定义的括号后用: type声明返回值类型，例如:\r\n```\r\n<?php\r\nfunction a() : bool{\r\n   return 1;\r\n}\r\nvar_dump(a());\r\n```\r\n返回时会自动把1转换为true，与上面的函数参数类型声明一样，在严格模式下会报错:\r\n```\r\nFatal error: Uncaught TypeError: Return value of a() must be of the type boolean, integer returned\r\n```\r\n\r\n## 匿名类\r\n写惯java或python的朋友应该很高兴，因为终于等到了这个在静态类型语言中很寻常的匿名类特性。PHP7中可通过new class的方式直接创建匿名类的实例(当你要抛出异常对象时可能会感受到这特性的好处————无须再定义整个具体的异常类了)：\r\n```\r\n<?php\r\ninterface Logger {\r\n    public function log(string $msg);\r\n}\r\n\r\nclass Application {\r\n    private $logger;\r\n\r\n    public function getLogger(): Logger {\r\n         return $this->logger;\r\n    }\r\n\r\n    public function setLogger(Logger $logger) {\r\n         $this->logger = $logger;\r\n    }\r\n}\r\n\r\n$app = new Application;\r\n$app->setLogger(new class implements Logger {\r\n    public function log(string $msg) {\r\n        echo $msg;\r\n    }\r\n});\r\n\r\nvar_dump($app->getLogger());\r\n?>\r\n```\r\n上面会输出：\r\n```\r\nobject(class@anonymous)#2 (0) {\r\n}\r\n```\r\n\r\n## 可以用define来定义常量数组\r\nPHP5.6时，常量数组只能用const来定义，PHP7后可以用define()来定义了：\r\n```\r\n<?php\r\ndefine('ANIMALS', [\r\n    'dog',\r\n    'cat',\r\n    'bird'\r\n]);\r\n\r\necho ANIMALS[1]; // outputs \"cat\"\r\n?>\r\n```\r\n\r\n## 新的运算符\r\n\r\n- \"<=>\"运算符，用于比较两个表达式： \r\n  $a <=> $b 返回 \r\n    -1: if $a > $b\r\n    0: if $a == $b\r\n    1: if $a < $b\r\n\r\n- 取默认值运算符: \"??\"，从此可以打少好多字符\r\n  in php5: \r\n``` \r\n$a = isset($b) ? $b : 'default';\r\n```\r\n\r\n  in php7:\r\n```\r\n$a = $b ?? 'default';\r\n\r\n// Coalescing can be chained: this will return the first\r\n// defined value out of $_GET['user'], $_POST['user'], and\r\n// 'nobody'.\r\n$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';\r\n```\r\n\r\n# 不兼容的地方\r\n\r\n## error与exception的转变\r\n很多fatal与recoverable fatal error被转换成exception了，这意味着你自定义的error handler不会被触发，因为不再有error，只会抛exception，exception需要你cache。\r\n\r\n\r\n## 构造函数失败时会抛异常\r\nPHP7前，某些php内部的类在构造失败时会返回NULL或一个不可用的对象，但现在会直接抛Exception，你需要去catch，否则会出错。\r\n\r\n## 改变了E_STRICT通知的严重性\r\n所有的E_STRICT通知都被重新分类到其它级别，但E_STRICT这个常量依然保留，只是error_reporting(E_ALL|E_STRICT)不会再产生任何错误。\r\n\r\n## 新的抽象语法树导致变量解释方式的不兼容\r\nPHP7使用了新的抽象语法树来解释源代码，这样可以提高了语言的表达性（一些以前很奇怪难懂的写法现在可以用很简单直观的方式来表达了），但同时也带来了一些向后兼容性的问题。\r\n\r\n- 变量解释方向相反了\r\n非直接变量（变量、属性、方法）现在会严格地遵从“从左到右”的解释规则，而非以前的混合方式。 新旧两种间接表达式的解释方式对比: \r\n\r\nExpression|PHP 5 interpretation|PHP 7 interpretation\r\n----------|--------------------|--------------------\r\n$$foo['bar']['baz'] | ${$foo['bar']['baz']} | ($$foo)['bar']['baz']\r\n$foo->$bar['baz'] | $foo->{$bar['baz']} | ($foo->$bar)['baz']\r\n$foo->$bar['baz']() | $foo->{$bar['baz']}() | ($foo->$bar)['baz']()\r\nFoo::$bar['baz']() | Foo::{$bar['baz']}() | (Foo::$bar)['baz']()\r\n\r\n\r\n- list()的赋值顺序相反了\r\n以前list()是反向的顺序，现在按定义的顺序来赋值。例如：\r\n```\r\n<?php\r\nlist($a[], $a[], $a[]) = [1, 2, 3];\r\nvar_dump($a);\r\n?>\r\n```\r\nPHP 5 会输出：\r\n```\r\narray(3) {\r\n  [0]=>\r\n  int(3)\r\n  [1]=>\r\n  int(2)\r\n  [2]=>\r\n  int(1)\r\n}\r\n```\r\nPHP 7 会输出：\r\n```\r\narray(3) {\r\n  [0]=>\r\n  int(1)\r\n  [1]=>\r\n  int(2)\r\n  [2]=>\r\n  int(3)\r\n}\r\n```\r\n\r\n- list()不允许无参调用\r\n直接看例子，以下在PHP7中会报错：\r\n```\r\n<?php\r\nlist() = $a;\r\nlist(,,) = $a;\r\nlist($x, list(), $y) = $a;\r\n?>\r\n```\r\n\r\n## foreach的重要变化\r\n- foreach传值调用操作是数组的副本。 \r\n这意味着默认的情况下你在foreach里修改数据的数据不会影响到原数组。\r\n\r\n- 传引用调用时会动态检测到数据的变化\r\n简单地说，就是你在foreach里添加或删除数据元素，会直接影响到当前正在操作的数组，直接看代码：\r\n```\r\n<?php\r\n$array = [0];\r\nforeach ($array as &$val) {\r\n    var_dump($val);\r\n    $array[1] = 1;\r\n}\r\n?>\r\n```\r\n在PHP 5会输出：\r\n```\r\nint(0)\r\n```\r\n而PHP 7会输出：\r\n```\r\nint(0)\r\nint(1)\r\n```\r\n\r\n## yield不再是函数，而是一个右关联的运算符\r\n即是不需要加括号()，例如：\r\n```\r\n<?php\r\necho yield -1;\r\n// Was previously interpreted as\r\necho (yield) - 1;\r\n// And is now interpreted as\r\necho yield (-1);\r\n\r\nyield $foo or die;\r\n// Was previously interpreted as\r\nyield ($foo or die);\r\n// And is now interpreted as\r\n(yield $foo) or die;\r\n?>\r\n```\r\n\r\n\r\n\r\n# Benchmark Detail\r\n用相同的ab参数： \r\n```\r\nab -n 1000 -c 200 http://php5.batman.me/wordpress/ \r\n```\r\n\r\n## ====== Round 1 ======\r\n### CONDITION\r\n- nginx worker: 10\r\n- php-fpm max_children: 15\r\n- requests: 1000\r\n- concurrency: 200\r\n\r\n### RESULT\r\n                        php7 | php5\r\n-----------------------------|-----\r\nRequest per second: | 327.85 | 258.34\r\nTime per request: | 2.75(ms) | 4.41(ms)\r\n\r\n\r\n## ====== Round 2 ======\r\n### CONDITION\r\n- nginx worker: 20\r\n- php-fpm max_children: 15\r\n- requests: 1000\r\n- concurrency: 200\r\n\r\n### RESULT\r\n                        php7 | php5\r\n-----------------------------|-----\r\nRequest per second: | 354.15 | 266.66\r\nTime per request: | 2.824(ms) | 3.75(ms)\r\n\r\n\r\n## ====== Round 3 ======\r\n### CONDITION\r\n- nginx worker: 20\r\n- php-fpm max_children: 15\r\n- requests: 1000\r\n- concurrency: 500\r\n\r\n### RESULT\r\n                        php7 | php5\r\n-----------------------------|-----\r\nRequest per second: | 346.62 | 232.75\r\nTime per request: | 2.885(ms) | 4.297(ms)\r\n\r\n\r\n# 性能报告图表\r\n自带的sapi benchmark:\r\n\r\n![自带的sapi benchmark](https://raw.githubusercontent.com/sunshine17/sunshine17.github.io/master/images/synthetic-bench-2.jpg)\r\n\r\n性能统计图:\r\n\r\n![性能统计图](https://raw.githubusercontent.com/sunshine17/sunshine17.github.io/master/images/statistic.jpg)\r\n\r\nab测试1:\r\n\r\n![ab测试1](https://raw.githubusercontent.com/sunshine17/sunshine17.github.io/master/images/ab-1.jpg)\r\n\r\nab测试2:\r\n\r\n![ab测试2](https://raw.githubusercontent.com/sunshine17/sunshine17.github.io/master/images/ab-2.jpg)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}